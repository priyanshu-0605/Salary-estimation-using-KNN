import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import confusion_matrix, accuracy_score
import tkinter as tk
from tkinter import messagebox, Toplevel, Label

# Load and preprocess dataset
dataset = pd.read_csv('salary.csv')

# Map income to binary
dataset['income'] = dataset['income'].map({'<=50K': 0, '>50K': 1}).astype(int)

# Select only 4 relevant numerical features
dataset = dataset[['age', 'education.num', 'capital.gain', 'hours.per.week', 'income']]

# Split into features and label
X = dataset.iloc[:, :-1].values
Y = dataset.iloc[:, -1].values

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.25, random_state=0)

# Feature scaling
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Train KNN model
model = KNeighborsClassifier(n_neighbors=2, metric='minkowski', p=2)
model.fit(X_train, y_train)

# Predict on test set and compute confusion matrix
y_pred = model.predict(X_test)
cm = confusion_matrix(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)


# GUI functionality
def show_confusion_matrix():
    cm_window = Toplevel()
    cm_window.title("Confusion Matrix")

    Label(cm_window, text="Confusion Matrix:", font=("Arial", 12, "bold")).pack(pady=5)
    
    for i in range(len(cm)):
        Label(cm_window, text=str(cm[i])).pack()

    Label(cm_window, text=f"\nAccuracy: {accuracy*100:.2f}%", font=("Arial", 11)).pack(pady=10)


def predict_salary():
    try:
        age = int(entry_age.get())
        edu = int(entry_edu.get())
        cg = int(entry_cg.get())
        wh = int(entry_wh.get())

        new_data = [[age, edu, cg, wh]]
        new_data_scaled = sc.transform(new_data)
        result = model.predict(new_data_scaled)

        if result[0] == 1:
            messagebox.showinfo("Prediction Result", "✅ Employee might earn **more than 50K**.")
        else:
            messagebox.showinfo("Prediction Result", "❌ Employee might earn **50K or less**.")

        show_confusion_matrix()

    except ValueError:
        messagebox.showerror("Input Error", "Please enter valid integers for all fields.")


# Create the GUI window
root = tk.Tk()
root.title("Salary Prediction GUI")

# Labels and Inputs
tk.Label(root, text="Age").grid(row=0, column=0, padx=10, pady=5)
entry_age = tk.Entry(root)
entry_age.grid(row=0, column=1)

tk.Label(root, text="Education (numeric)").grid(row=1, column=0, padx=10, pady=5)
entry_edu = tk.Entry(root)
entry_edu.grid(row=1, column=1)

tk.Label(root, text="Capital Gain").grid(row=2, column=0, padx=10, pady=5)
entry_cg = tk.Entry(root)
entry_cg.grid(row=2, column=1)

tk.Label(root, text="Hours per Week").grid(row=3, column=0, padx=10, pady=5)
entry_wh = tk.Entry(root)
entry_wh.grid(row=3, column=1)

# Submit Button
submit_btn = tk.Button(root, text="Predict Salary", command=predict_salary)
submit_btn.grid(row=4, column=0, columnspan=2, pady=20)

root.mainloop()
